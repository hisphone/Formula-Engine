number  = @{ int ~ ("." ~ ASCII_DIGIT*)?  }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }

string_double_quote = ${ "\"" ~ str_inner_double ~ "\"" }
str_inner_double    = @{ char_double* }
char_double         = { !("\"") ~ ANY
                        | "\"" ~ ( "\"")  }

string_single_quote = ${ "\'" ~ str_inner_single ~ "\'" }
str_inner_single    = @{ char_single* }
char_single         = { !("\'") ~ ANY }

string_constant     = ${ str_inner_constant }
str_inner_constant  = @{ char_constant* }
char_constant       = { "\'" ~  ("=")
                        |!("=") ~ ANY } 

HAN = _{ '\u{4e00}'..'\u{9fa5}' }

operator = _{ arithmetic_operator | string_operator | logical_operator }
    
arithmetic_operator = _{ add | subtract | multiply | divide | power }     
    add         = { "+" }
    subtract    = { "-" }
    multiply    = { "*" }
    divide      = { "/" }
    power       = { "^" }
    
string_operator = _{ concat }
    concat     =  { "&" }

logical_operator = _{ equal | not_equal | greater_or_equal | greater 
                       | less_or_equal | less }
    equal           = { "=" }
    not_equal       = { "<>"}
    greater         = { ">" } 
    less            = { "<" }
    greater_or_equal= { ">=" }
    less_or_equal   = { "<=" }

sdata = { "[" ~ sdata_item ~ ("," ~ sdata_item)* ~ "]" }

sdata_item = _{ date_item | area_item | indicator_item | unit_item}

date_item = _{ "日期" ~ ":" ~ date_value }

date_value = { year ~ (accumulative | (current ~ beginning_or_end?) | beginning_or_end)? }
    year = _{ year_value ~ "年" }
    year_value = { ASCII_NONZERO_DIGIT ~ ASCII_DIGIT{3} }
    accumulative = { accumulative_quarter | accumulative_month }
    accumulative_quarter = _{ "1-" ~ quarter ~ "季度" }
    accumulative_month = _{ "1-" ~ month ~ "月" }
    current = _{ quarter | month }
    quarter = _{ quarter_value ~ "季度" }
    quarter_value = { "1" | "2" | "3" | "4" }
    month = _{ month_value ~ "月" }
    month_value = { ("1" ~ ("0" | "1" | "2")?) | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" }
    beginning_or_end = _{ beginning | end }
    beginning = { "初" }
    end = { "末" }

area_item = _{ "地区" ~ ":" ~ area_value }

area_value = { (HAN | "（" | "）" | ASCII_ALPHA)+ }

indicator_item = _{ "指标" ~ ":" ~ indicator_value }

indicator_value = { (HAN | "（" | "）" | ASCII_ALPHA)+ }

unit_item = _{ "单位" ~ ":" ~ unit_value }

unit_value = { YUAN | QIAN_YUAN | WAN_YUAN | YI_YUAN 
    | REN | WAN_REN | YI_REN
    | YUAN_PER_REN | YUAN_PER_WAN_REN | WAN_YUAN_PER_REN | WAN_YUAN_PER_WAN_REN
    | PERCENT | NONE }
    YUAN = { "元" }
    QIAN_YUAN = { "千元" }
    WAN_YUAN = { "万元" }
    YI_YUAN = { "亿元" }
    REN = { "人" }
    WAN_REN = { "万人" }
    YI_REN = { "亿人" }
    YUAN_PER_REN = { "元/人" }
    YUAN_PER_WAN_REN = { "元/万人" }
    WAN_YUAN_PER_REN = { "万元/人" }
    WAN_YUAN_PER_WAN_REN = { "万元/万人" }
    PERCENT = { "%" }
    NONE = { "" }

function = _{ abs | sum | product | average | negate | days | right | left | iff | isblank | custom_function  }
    abs     = { "ABS" ~ "(" ~ expr ~ ")" }
    sum     = { "SUM" ~ function_param_with_atomic_expr}   
    product = { "PRODUCT" ~ function_param_with_atomic_expr}
    average = { "AVERAGE" ~ function_param_with_atomic_expr}
    negate  = { "-" ~ (function_param | iterator | reference) }
    days    = { "DAYS" ~ function_param }
    right   = { "RIGHT" ~ function_param }
    left    = { "LEFT" ~ function_param }
    iff     = { "IF" ~ three_params }
    isblank = { "ISBLANK" ~ function_param}
    custom_function = { reference ~ (function_param | empty_param) } 
    
logical_function = _{ or | and | xor | not } 
    or      =  { "OR" ~ function_param_with_atomic_expr } 
    and     =  { "AND" ~ function_param_with_atomic_expr }
    xor     =  { "XOR" ~ function_param_with_atomic_expr }
    not     =  { "NOT" ~ "(" ~ expr ~ ")" }

function_param      = _{ "(" ~ expr ~ ("," ~ expr)*? ~ ")" }
empty_param         = { "(" ~ ")" }
function_param_with_atomic_expr = _{ "(" ~ param_inner? ~ param_with_blank*? ~ ")" }
three_params  = _{ 
    "(" ~ ")" |
    "(" ~ first_param ~ param ~ param ~ ")" }

atomic_expr = ${ expr }
param_inner = _{ atomic_expr | expr}
first_param = { param_inner? }
param       = { ","? ~ param_inner? }
param_with_blank   = _{ param1 | blank }
blank         = {","}
param1          = {"," ~ param_inner}

boolean = _{ t | f }
    t    = { ( "T" | "t") ~ ( "R" | "r") ~ ( "U" | "u") ~ ( "E" | "e") }
    f    = { ( "F" | "f") ~ ( "A" | "a") ~ ( "L" | "l") ~ ( "S" | "s") ~ ( "E" | "e") }

reference = @{ (ASCII_ALPHA | "_" | "\\") ~ char_reference* }  
char_reference = { ASCII_ALPHANUMERIC | "." | "_" } 

iterator = { "{" ~ expr ~ ("," ~ expr)*? ~ "}" }

expr = { term ~ (operator ~ term)* }
term = _{ number | "(" ~ expr ~ ")" | string_double_quote 
        | string_single_quote | logical_function | function  | boolean | reference | sdata | iterator } 
term_constant = _{ string_constant }

formula = _{ SOI ~ "=" ~ expr ~ EOI | SOI ~ term_constant ~ EOI } 

WHITESPACE = _{ " "  }
